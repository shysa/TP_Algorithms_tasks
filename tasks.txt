    1_4. “Считалочка”.
    В круг выстроено N человек, пронумерованных числами от 1 до N. Будем исключать каждого k-ого до тех пор,
    пока не уцелеет только один человек. (Например, если N=10, k=3, то сначала умрет 3-й, потом 6-й, затем 9-й,
    затем 2-й, затем 7-й, потом 1-й, потом 8-й, за ним - 5-й, и потом 10-й. Таким образом, уцелеет 4-й.)
    Необходимо определить номер уцелевшего.

    N, k ≤ 10000.
    Требования:  Решить перебором.

==========================================

     !!!2_1. Дан отсортированный массив целых чисел A[0..n-1] и массив целых чисел B[0..m-1].
     Для каждого элемента массива B[i] найдите минимальный индекс k минимального элемента массива A,
     равного или превосходящего B[i]: A[k] >= B[i]. Если такого элемента нет, выведите n. n, m ≤ 10000.

     Требования:  Время работы поиска k для каждого элемента B[i]: O(log(k)).
     Внимание! В этой задаче для каждого B[i] сначала нужно определить диапазон для бинарного поиска
     размером порядка k, а потом уже в нем делать бинарный поиск.

     Формат входных данных.
     В первой строчке записаны числа n и m. Во второй и третьей массивы A и B соответственно.


==========================================

    3_1. Реализовать очередь с динамическим зацикленным буфером.
    Требования: Очередь должна быть реализована в виде класса.

==========================================

    Требование для всех вариантов Задачи 4
    Решение всех задач данного раздела предполагает использование кучи, реализованной в виде класса.
    Решение должно поддерживать передачу функции сравнения снаружи.

    !!!4_3. Тупики.
    На вокзале есть некоторое количество тупиков, куда прибывают электрички. Этот вокзал является
    их конечной станцией. Дано расписание движения электричек, в котором для каждой электрички указано
    время ее прибытия, а также время отправления в следующий рейс. Электрички в расписании упорядочены
    по времени прибытия. Когда электричка прибывает, ее ставят в свободный тупик с минимальным номером.
    При этом если электричка из какого-то тупика отправилась в момент времени X, то электричку, которая
    прибывает в момент времени X, в этот тупик ставить нельзя, а электричку, прибывающую в момент X+1 — можно.

    В данный момент на вокзале достаточное количество тупиков для работы по расписанию.

    Напишите программу, которая по данному расписанию определяет, какое минимальное количество тупиков
    требуется для работы вокзала.

    Формат входных данных. Вначале вводится n - количество электричек в расписании. Затем вводится n строк
    для каждой электрички, в строке - время прибытия и время отправления. Время - натуральное число от 0 до 10^9.
    Строки в расписании упорядочены по времени прибытия.

    Формат выходных данных. Натуральное число - минимальное количеством тупиков.
    Максимальное время: 50мс, память: 5Мб.

==========================================

    Задача 5.
    Требование для всех вариантов Задачи 5
    Во всех задачах данного раздела необходимо реализовать и использовать сортировку слиянием.
    Решение должно поддерживать передачу функции сравнения снаружи.
    Общее время работы алгоритма O(n log n).

    5_3. Закраска прямой 1.
    На числовой прямой окрасили N отрезков. Известны координаты левого и правого концов каждого отрезка (Li и Ri).
    Найти длину окрашенной части числовой прямой.

==========================================

    !!!Задача 6.
    Даны неотрицательные целые числа n,k и массив целых чисел из [0..10^9] размера n. Требуется найти k-ю порядковую
    статистику. т.е. напечатать число, которое бы стояло на позиции с индексом k (0..n-1) в отсортированном массиве.

    Требования: к дополнительной памяти: O(n). Среднее время работы: O(n). Должна быть отдельно выделенная
    функция partition. Рекурсия запрещена. Решение должно поддерживать передачу функции сравнения снаружи.

    Функцию Partition следует реализовывать методом прохода двумя итераторами в одном направлении.
    Описание для случая прохода от начала массива к концу:
    Выбирается опорный элемент. Опорный элемент меняется с последним элементом массива.
    Во время работы Partition в начале массива содержатся элементы, не бОльшие опорного. Затем располагаются элементы,
    строго бОльшие опорного. В конце массива лежат нерассмотренные элементы. Последним элементом лежит опорный.
    Итератор (индекс) i указывает на начало группы элементов, строго бОльших опорного.
    Итератор j больше i, итератор j указывает на первый нерассмотренный элемент.
    Шаг алгоритма. Рассматривается элемент, на который указывает j. Если он больше опорного, то сдвигаем j.
    Если он не больше опорного, то меняем a[i] и a[j] местами, сдвигаем i и сдвигаем j.
    В конце работы алгоритма меняем опорный и элемент, на который указывает итератор i.

    6_3. Реализуйте стратегию выбора опорного элемента “случайный элемент”.
    Функцию Partition реализуйте методом прохода двумя итераторами от начала массива к концу.

==========================================

    7_3. Binary MSD для long long.
    Дан массив неотрицательных целых 64-разрядных чисел. Количество чисел не больше 106. Отсортировать массив
    методом MSD по битам (бинарный QuickSort).
